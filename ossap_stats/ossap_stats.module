<?php

/**
 * @file
 * Statistics for OpenScholar Single Access Point (OSSAP).
 */

/**
 * Defines the settings variable name for the total child sites count block.
 */
define('OSSAP_SITES_BLOCK_SETTINGS', 'ossap_stats_sites_settings');
define('OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT', 3);
/**
 * Implements hook_menu().
 */
function ossap_stats_menu() {
  $items = array();

  $items['ossap/stats'] = array(
    'title' => t('OpenScholar SAP stats'),
    'page callback' => '_ossap_stats_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ossap/stats.js'] = array(
    'title' => t('OpenScholar Stats'),
    'page callback' => '_ossap_stats_embed_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ossap_stats_theme() {
  return array(
    'ossap_stats_embed_js' => array(
      'variables' => array(
        'aggregates' => NULL,
        'os_version' => NULL,
        'messages' => NULL,
        'getsatisfaction' => NULL,
      ),
      'template' => 'ossap-stats-embed-js',
    ),
  );
}

/**
 * Page callback; exposes all OSSAP stats in one JSON object.
 */
function _ossap_stats_page() {
  // Prepares a safe version of the child_domains variable to expose.
  $child_domains = variable_get('ossap_child_domains', array());
  foreach ($child_domains as $url => $info) {
    if (isset($info['restuser'])) {
      unset($child_domains[$url]['restuser']);
    }
  }

  // Prepares the data array to render to the page as JSON.
  $data = array(
    'success' => TRUE,
    'child_domains' => $child_domains,
    'aggregates' => variable_get('ossap_stats_aggregates', array()),
    'os_version' => _ossap_stats_get_os_version(),
  );

  // Adds GetSatisfaction statistics if any statistics exist.
  $getsatisfaction = variable_get('ossap_stats_getsatisfaction', NULL);
  if ($getsatisfaction !== NULL) {
    $data['getsatisfaction'] = $getsatisfaction;
  }

  // Adds activity statistics if any statistics exist.
  $activity = variable_get('ossap_stats_activity', NULL);
  if ($activity !== NULL) {
    $data['activity'] = $activity;
  }

  drupal_json_output($data);
}

/**
 * Page callback; formats and displays the embed code to paste on any site.
 */
function _ossap_stats_embed_js($stat) {
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  $aggregates = variable_get('ossap_stats_aggregates', array());

  // Prepares any available GetSatisfaction statistics.
  $getsatisfaction = variable_get('ossap_stats_getsatisfaction', array());
  // Prepares the activity messages.
  $messages = '';
  $activity = variable_get('ossap_stats_activity', array());
  if (isset($activity['messages']) && !empty($activity['messages'])) {
    $count = variable_get('ossap_stats_embed_message_count', OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT);
    $items = array_slice($activity['messages'], 0, $count);
    $build = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array('class' => array('ossap-stats-embed-messages')),
    );
    $messages = json_encode(drupal_render($build));
  }
  $variables = array(
    'aggregates' => $aggregates,
    'os_version' => _ossap_stats_get_os_version(),
    'messages' => $messages,
    'getsatisfaction' => $getsatisfaction,
  );

  print theme('ossap_stats_embed_js', $variables);
  exit;
}

/**
 * Implements hook_cron_queue_info().
 */
function ossap_stats_cron_queue_info() {
  $queue = array();

  $queue['ossap_stats_queue'] = array(
    'worker callback' => 'ossap_stats_block_worker',
  );

  return $queue;
}

/**
 * Implements hook_cron().
 */
function ossap_stats_cron() {
  $queue = DrupalQueue::get('ossap_stats_queue');
  $queue->createQueue();
  // Add an array key as a new cron job key
  $stats = array('sites', 'getsatisfaction', 'activity');
  foreach ($stats as $stat) {
    $queue->createItem($stat);
  }
}

/**
 * Cron worker callback for OSSAP stats.
 */
function ossap_stats_block_worker($stat = '') {
  switch ($stat) {
    case 'sites':
      ossap_stats_sites_cron_worker();
      break;
    case 'getsatisfaction':
      ossap_stats_getsatisfaction_cron_worker();
      break;
    case 'activity':
      ossap_stats_activity_cron_worker();
      break;
  }
}

function ossap_stats_getsatisfaction_cron_worker() {
  $function = 'getsatisfaction_integration_stats';
  if (!function_exists($function)) {
    return;
  }

  $getsatisfaction_stats = $function();
  if (!empty($getsatisfaction_stats)) {
    variable_set('ossap_stats_getsatisfaction', $getsatisfaction_stats);
  }
}

/**
 * Cron queue worker to aggregate latest status messages.
 */
function ossap_stats_activity_cron_worker() {
  $activity = array();

  $servers = variable_get('ossap_child_domains', array());
  $domains = array_keys($servers);
  $options = array();
  foreach ($domains as $domain) {
    $url = "http://$domain/activity.json";
    $result = drupal_http_request($url, $options);
    if (isset($result->data)) {
      $data = drupal_json_decode($result->data);
      foreach ($data['messages'] as $key => $info) {
        $time = _ossap_stats_time_markup($info['timestamp']);

        $activity['messages'][$key] = array(
          'data' => $time . $info['markup'],
        );
      }
    }
  }

  if (!empty($activity)) {
    if (!empty($activity['messages'])) {
      // Sorts the activity messages first by timestamp desc, then by nid desc.
      ksort($activity['messages'], SORT_NUMERIC);
      $activity['messages'] = array_reverse($activity['messages']);
    }
    variable_set('ossap_stats_activity', $activity);
  }
}

/**
 * Cron queue worker for the ossap_stats_sites block.
 *
 * Invokes drupal_http_request on each child server to get total sites stats.
 */
function ossap_stats_sites_cron_worker() {
  $aggregates = array();

  $stat_keys = array_keys(_os_stats_queries());
  $unsummable = array('filesize');
  $servers = variable_get('ossap_child_domains', array());
  $domains = array_keys($servers);
  $options = array();
  foreach ($domains as $domain) {
    $url = "http://$domain/stats";
    $result = drupal_http_request($url, $options);
    if (isset($result->data)) {
      $data = drupal_json_decode($result->data);
      foreach ($stat_keys as $stat) {
        if (in_array($stat, $unsummable)) {
          continue;
        }
        if (isset($data[$stat]['value'])) {
          if(!isset($aggregates[$stat])){
            $aggregates[$stat] = 0;
          }
          $aggregates[$stat] += $data[$stat]['value'];
        }
      }
    }
  }

  if (count($aggregates)) {
    variable_set('ossap_stats_aggregates', $aggregates);
  }
}

/**
 * Gets current OpenScholar release version string, like "3.10".
 */
function _ossap_stats_get_os_version() {
  // Parses the info file to get os_version.
  $info = system_get_info('module','openscholar');

  // Removes the Drupal major version number prefix (i.e. "7.x-").
  $os_version = substr($info['os_version'], 4);

  return $os_version;
}

/**
 * Implements hook_form_FORM_ID_alter() for os_settings_form.
 *
 * Allows admins to set the global Google Analytics ID and sitewide options.
 */
function ossap_stats_form_os_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['ossap_stats'] = array(
    '#type' => 'fieldset',
    '#title' => t('OSSAP Stats'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $prefix = '<h4>' . t('Embeddable stats') . '</h4><p class="description">';
  $prefix .= t('These settings affect the information available in the <a href="!href">OSSAP Stats embed JS</a>.', array('!href' => url('ossap/stats.js'))) . '</p>';
  $form['ossap_stats']['ossap_stats_embed_message_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity message count'),
    '#prefix' => $prefix,
    '#weight' => 15,
    '#size' => 6,
    '#maxlength' => 255,
    '#default_value' => variable_get('ossap_stats_embed_message_count', OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT),
    '#description' => t('(Integer) How many recent activity messages to display.'),
  );
}

/**
 * Returns an HTML5 semantic time tag with datetime, title and time ago text.
 *
 * @see http://microformats.org/wiki/abbr-datetime-pattern
 */
function _ossap_stats_time_markup($timestamp) {
  $markup = '';

  if (!empty($timestamp) && is_numeric($timestamp)) {
    $time = format_interval(time() - $timestamp);
    $datetime = strftime('%Y-%m-%d %H:%M:%S%z', $timestamp);
    $title = format_date($timestamp);
    $time_ago = t('@time ago', array('@time' => $time));
    $build = array(
      '#theme' => 'html_tag',
      '#tag' => 'time',
      '#attributes' => array(
        'class' => array(
          'time',
        ),
        'datetime' => $datetime,
        'title' => $title,
      ),
      '#value' => $time_ago,
    );
    $markup = drupal_render($build);
  }

  return $markup;
}
